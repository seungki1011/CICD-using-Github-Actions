plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'seungki'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.10" // jacoco 버전 명시
}

jacocoTestReport {
	reports {
		xml.required = true // madrapps/jacoco-report를 사용하기 위해서 xml 리포트 사용
		html.required = true
	}
    // 각 리포트 타입 마다 저장 경로를 설정할 수 있다
	//  html.destination file("$buildDir/jacoco/html")
    //  xml.destination file("$buildDir/jacoco/xml")

	// xml 기본 저장 경로: $buildDir/reports/jacoco/test/jacocoTestReport.xml

	// 보고서에 표시되는 걸 제외하고 싶은 클래스를 명시
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
							"seungki/cicdpractice/api/domain/**",
							"**/*Application*",
							"**/*Request*",
							"**/*Response*",
							"**/*Exception*"
					])
				})
		)
	// 보고서를 생성하고 나서야 테스트 커버리지 검증을 진행
	finalizedBy(jacocoTestCoverageVerification)
}

// 커버리지 검증을 위한 기준 제시
jacocoTestCoverageVerification {
	violationRules {
		rule {

			/**
			 * element: 커버리지를 체크하는 기준
			 *
			 * BUNDLE: 전체 프로젝트의 모든 파일(default)
			 * CLASS: 클래스
			 * METHOD: 메서드
			 * PACKAGE: 패키지
			 * SOURCEFILE: 소스 파일
			 **/
			enabled = true
			element = 'CLASS'

			/**
			 * counter: 커버리지 측정을 위한 최소의 단위
			 *
			 * BRANCH: 조건문의 분기 수
			 * CLASS: 클래스의 수
			 * COMPLEXITY: 복잡도
			 * INSTRUCTION: Java 바이트코드 명령의 수(default)
			 * METHOD: 메서드의 수
			 * LINE: 빈 줄을 제외한 실제 코드의 라인 수
			 **/

			/**
			 * value: 커버리지의 측정 메트릭(metric)
			 *
			 * TOTALCOUNT: 전체 개수
			 * MISSEDCOUNT: 커버되지 않은 개수
			 * COVEREDCOUNT: 커버된 개수
			 * MISSEDRATIO: 커버되지 않은 비율. 0 ~ 1 사이의 숫자로, 1이 100%.
			 * COVEREDRATIO: 커버된 비율. 0 ~ 1 사이의 숫자로, 1이 100%. (default)
			 **/

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.80 // value에 대한 최소 통과 기준
			}

			// 커버리지 체크를 제외할 클래스를 명시
			// jacocoTestReport과 가르게 패키지 경로를 적어줘야 한다
			excludes = [
					"seungki.cicdpractice.api.domain.**",
					"**.*Application*",
					"**.*Request*",
					"**.*Response*",
					"**.*Exception*"
			]
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
//	testCompileOnly 'org.projectlombok:lombok:1.18.34'
//	testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}
}